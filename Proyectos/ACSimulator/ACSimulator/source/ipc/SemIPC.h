/* Generated by Together */
#ifndef SEMIPC_H
#define SEMIPC_H

// INCLUDES DEL SISTEMA
#include <sys/sem.h>

// INCLUDES DEL PROJECTO
#include "IPC.h"
#include "../lang/throwable/OcupadoExcepcion.h"
#include "../lang/throwable/LlenoExcepcion.h"
#include "../lang/throwable/ParametroExcepcion.h"
#include "../lang/throwable/InterrupcionExcepcion.h"
#include "../lang/throwable/TimeoutExcepcion.h"
#include "../lang/throwable/PermisoExcepcion.h"


// ================================================================
// DECLARACION DE CLASE
// ================================================================

   /**
   <PRE>
   *     SERVIABERTIS   -  Des. & Exp. Software.   (Derechos reservados)
   *     ---------------------------------------
   *
   * FICHERO: SemIPC.H
   *
   * DESCRIPCION:
   *   Clase utilidad para el uso de semaforos IPC
   *
   * FECHA CREACION: 22-04-2005
   *
   * AUTOR DISENYO:
   *
   * PROGRAMADOR: Jorge Martinez
   *
   * MODIFICATIONES:
   *
   *    |   FECHA    |   AUTOR   |  RAZON                                   |
   *    ---------------------------------------------------------------------
   *    | DD-MM-YYYY |            |                                        |
   *    ---------------------------------------------------------------------
   *
   * </PRE>
   */


class SemIPC : public IPC
{
   // ATRIBUTOS
   // =====================================================
   ////////////////////   PUBLIC      /////////////////////
   public :
      /**
       * Numero maximo de semaforos que se podran manejar conjuntamente
       */
      static const UWordType MAX_NUM_SEMAFOROS = 256;

      /**
       * Constante para indicar que las operaciones deben realizarse sobre todos
       * los semaforos de forma atomica
       */
      static const SByteType TODOS = -1;

    /**
     * Constantes utilizadas en el metodo operacion para indicar el tipo de
     * operacion realizar
     */
      static const SWordType WAIT = -1;
      static const SWordType SIGNAL = +1;


     /**
      * Constante que indica que una operacion de wait o signal debe deshacerse
      * cuando el proceso termina
      */
      static const SWordType DESHACER = SEM_UNDO;

   private:
      // Numero de semaforos
      SDWordType msdNsems;

   ////////////////////   PRIVATE      ////////////////////
   private:
   // METODOS
   // =====================================================

   ////////////////////   PUBLIC       ////////////////////
   public:
      // ===============   CICLO DE VIDA    ==================
      SemIPC();

      // ===============   ACCESO     ========================
       void setNsems(const SDWordType& sdNsems);
       virtual void resetAtributos();

     /**
      * <PRE>
      *    Establece el valor de uno o todos los semaforos
      *
      * PARAMETROS:
      *   uwValor -> Valor del semaforo
      *
      *   uwSemaforo -> Indice del semaforo dentro del conjunto
      *
      *   bTodos -> Si es true, asigna el valor a todo los semaforos. Si es
      *   false solo asigna el valor al semaforo uwSemaforo
      *
      * VALORES RETORNO:
      *
      * EXCEPCIONES:
      *    PermisoExcepcion, NoExisteExcepcion, ParametroExcepcion,
      *    RangoExcepcion, DesconocidoExcepcion;
      * NOTAS:
      *
      * </PRE>
      */
      void setValor( const UWordType uwValor, SWordType swSemaforo = TODOS) const;

      // ===============   CONSULTA   ========================
     /**
      * Retorna el numeros de semaforos que tiene el conjunto
      */
      SDWordType getNsems() const;

     /**
      * <PRE>
      *    Permite consultar el valor de un semaforo
      *
      * PARAMETROS:
      *   uwSemaforo -> Indice del semaforo dentro del conjunto
      *
      * VALORES RETORNO:
      *    Valor del semaforo uwSemaforo
      *
      * EXCEPCIONES:
      *   PermisoExcepcion, NoExisteExcepcion, ParametroExcepcion,
      *   DesconocidoExcepcion
      *
      * NOTAS:
      *
      * </PRE>
      */
      SDWordType getValor( const UWordType& uwSemaforo = 0 ) const;

      // ===============   OPERACIONES========================
     /**
      * <PRE>
      *    Crea y/o asocia el objeto a un conjunto de semaforos IPC
      *
      * PARAMETROS:
      *   sdKey -> Clave para referenciar el semaforo
      *
      *   sdNSems -> Numero de elementos que contendra el semaforo
      *
      *   sdFlags -> Puede tomar uno de los siguientes valores: VINCULAR, CREAR
      *   o CREAR_EXCLUSIVO.
      *
      * VALORES RETORNO:
      *
      * EXCEPCIONES:
      *
      *   PermisoExcepcion, OcupadoExcepcion, NoExisteExcepcion, RangoExcepcion,
      *   MemoriaExcepcion, LlenoExcepcion, DesconocidoExcepcion
      *
      * NOTAS:
      *
      * </PRE>
      */
      void crear( const SDWordType& sdKey, const SDWordType& sdNSems,
                  const SDWordType& sdFlags );

     /**
      * <PRE>
      *   Realiza una operacion de wait sobre el elemento uwSemaforo,
      *   decrementando su valor
      *
      * PARAMETROS:
      *   swSemaforo -> Indice del semaforo sobre el que se aplica la operacion
      *   Si toma el valor TODOS realiza la operacion sobre todos los semaforos
      *
      *   sdFlags -> Puede tomar los siguientes valores DESHACER, BLOQUEAR o
      *   NO_BLOQUEAR o una combinacion valida de ellos.
      *
      * VALORES RETORNO:
      *
      * EXCEPCIONES:
      *    Las lanzadas por el metodo 'operacion'
      *
      * NOTAS:
      *
      * </PRE>
      */
      void wait( const SWordType& swSemaforo, const SDWordType& sdFlags) const;

     /**
      * <PRE>
      *   Realiza una operacion de signal sobre el elemento uwSemaforo,
      *   incrementando su valor
      *
      * PARAMETROS:
      *   swSemaforo -> Indice del semaforo sobre el que se aplica la operacion
      * Si toma el valor TODOS realiza la operacion sobre todos los semaforos
      *
      *   sdFlags -> Puede tomar los siguientes valores DESHACER, BLOQUEAR o
      *   NO_BLOQUEAR o una combinacion valida de ellos.
      *
      * VALORES RETORNO:
      *
      * EXCEPCIONES:
      *    Las lanzadas por el metodo 'operacion'
      *
      * NOTAS:
      *
      * </PRE>
      */
      void signal( const SWordType& swSemaforo, const SDWordType& sdFlags) const;

     /**
      * <PRE>
      *   Pone a 0 (semaforo en rojo) todos los semaforos del conjunto
      *
      * PARAMETROS:
      *
      * VALORES RETORNO:
      *
      * EXCEPCIONES:
      *
      * NOTAS:
      *
      * </PRE>
      */
      void borrar();

      /**
      * <PRE>
      *   Libera el semaforo IPC asociado al objeto
      *
      * PARAMETROS:
      *
      * VALORES RETORNO:
      *
      * EXCEPCIONES:
      *    PermisoExcepcion, NoExisteExcepcion, ParametroExcepcion,
      *    DesconocidoExcepcion
      *
      * NOTAS:
      *
      * </PRE>
      */
      void destruir();

      static void existe (SDWordType lId);


   protected:
   /**
    * <PRE>
    *   Ejecuta un conjunto de Operaciones sobre un determinado Semaforo.
    *
    * PARAMETROS:
    *   swSemaforo -> Indice del semaforo sobre el que se aplica la operacion.
    *
    *   swOperaciones[] -> Mediante este aray se indican las operaciones atomicas que
    *   se realizaran sobre el semaforo especificado.
    *
    *   swMaxOperaciones -> Numero maximo de operaciones que se realizaran sobre el
    *   Semaforo
    *
    *   sdFlags -> Puede tomar los siguientes valores DESHACER, BLOQUEAR o
    *   NO_BLOQUEAR o una combinacion valida de ellos.
    *
    * VALORES RETORNO:
    *
    * EXCEPCIONES:
    *   PermisoExcepcion, TimeoutExcepcion, ParametroExcepcion,
    *   NoExisteExcepcion, InterrupcionExcepcion, MemoriaExcepcion,
    *   RangoExcepcion, DesconocidoExcepcion
    *
    * NOTAS:
    *
    * </PRE>
    */
    void operacion( const SWordType& swNumSemaforo, const SWordType swOperaciones[],
      const SWordType swMaxOperaciones, const SDWordType sdFlags) const;


   ////////////////////   PRIVATE       ////////////////////
   private:
   // ===============   OPERACIONES========================
   /**
    * <PRE>
    *   Incrementa o decrementa el valor de un elemento en funcion del valor de
    *   swOperacion.
    *
    * PARAMETROS:
    *   swSemaforo -> Indice del semaforo sobre el que se aplica la operacion.
    *   Si toma el valor TODOS realiza la operacion sobre todos los semaforos
    *
    *   swOperacion -> Puede tomar los valores  WAIT (decrementar) o SIGNAL
    *   (incrementar)
    *
    *   sdFlags -> Puede tomar los siguientes valores DESHACER, BLOQUEAR o
    *   NO_BLOQUEAR o una combinacion valida de ellos.
    *
    * VALORES RETORNO:
    *
    * EXCEPCIONES:
    *   PermisoExcepcion, TimeoutExcepcion, ParametroExcepcion,
    *   NoExisteExcepcion, InterrupcionExcepcion, MemoriaExcepcion,
    *   RangoExcepcion, DesconocidoExcepcion
    *
    * NOTAS:
    *
    * </PRE>
    */
    void operacion( const SWordType& swSemaforo, const SWordType& swOperacion,
      const SDWordType& sdFlags) const;




};

#endif //SEMIPC_H
