/* Generated by Together */

#ifndef COLAIPC_H
#define COLAIPC_H

//#ifdef __sun
//#define _XOPEN_SOURCE 500
//#endif


// INCLUDES DEL SISTEMA
#include <sys/msg.h>


// INCLUDES DEL PROJECTO
#include "IPC.h"
#include "../lang/throwable/OcupadoExcepcion.h"
#include "../lang/throwable/LlenoExcepcion.h"
#include "../lang/throwable/ParametroExcepcion.h"
#include "../lang/throwable/InterrupcionExcepcion.h"
#include "../lang/throwable/PermisoExcepcion.h"

// ================================================================
// DECLARACION DE CLASE
// ================================================================

   /**
   <PRE>
   *     SERVIABERTIS   -  Des. & Exp. Software.   (Derechos reservados)
   *     ---------------------------------------
   *
   * FICHERO: ColaIPC.H
   *
   * DESCRIPCION:
   *   Clase utilidad para el uso de colas IPC
   *
   * FECHA CREACION: 22-04-2005
   *
   * AUTOR DISENYO:
   *
   * PROGRAMADOR: Jorge Martinez
   *
   * MODIFICATIONES:
   *
   *    |   FECHA    |   AUTOR   |  RAZON                                   |
   *    ---------------------------------------------------------------------
   *    | DD-MM-YYYY |            |                                        |
   *    ---------------------------------------------------------------------
   *
   * </PRE>
   */

class ColaIPC : public IPC
{
   // ATRIBUTOS
   // =====================================================

   // METODOS
   // =====================================================
   ////////////////////   PUBLIC      /////////////////////
   public :

      // ===============   OPERACIONES========================
      /**
      * <PRE>
      *    Crea y/o asocia el objeto a una cola IPC
      *
      * PARAMETROS:
      *   sdKey -> Clave para referenciar la cola
      *
      *   sdFlags -> Puede tomar uno de los siguientes valores: VINCULAR, CREAR
      *   o CREAR_EXCLUSIVO.
      *
      * VALORES RETORNO:
      *
      * EXCEPCIONES:
      *   PermisoExcepcion, OcupadoExcepcion, NoExisteExcepcion,
      *   MemoriaExcepcion, LlenoExcepcion, DesconocidoExcepcion
      *
      * NOTAS:
      *
      * </PRE>
      */
      void crear(const SDWordType& sdKey, const SDWordType& sdFlags);

      /**
      * <PRE>
      *    Envia un mensaje por la cola IPC asociada
      *
      * PARAMETROS:
      *   pMsj -> Puntero a la zona de memoria donde reside el mensaje a enviar
      *
      *   sdLongMsj -> Tamano del mensaje
      *
      *   sdFlags -> Si toma el valor NO_BLOQUEAR el metodo retorna si la cola
      *   esta llena
      *
      * VALORES RETORNO:
      *   True si el mensaje ha podido enviarse; false en otro caso. El valor de
      *   retorno es util si sdFlags contiene NO_BLOQUEAR. Si sdFlags no
      *   contiene NO_BLOQUEAR y el mensaje no puede enviarse, el metodo lanzara
      *   una excepcion
      *
      * EXCEPCIONES:
      *   PermisoExcepcion, OcupadoExcepcion, NoExisteExcepcion,
      *   MemoriaExcepcion, LlenoExcepcion, DesconocidoExcepcion
      *
      * NOTAS:
      *
      * </PRE>
      */
      void escribir(const void *pMsj, const SDWordType& sdLongMsj,
         const SDWordType& sdFlags) const;

      /**
      * <PRE>
      *    Recibe un mensaje por la cola IPC asociada
      *
      * PARAMETROS:
      *   pMsj -> Puntero a la zona de memoria donde se copia el mensaje recibido
      *
      *   sdLongMsj -> Tamano de la zona de memoria apuntada por pMsj
      *
      *   sdTipo -> Tipo de mensaje a leer. Si vale o, se leera el primer
      *   mensaje, ignorando su tipo
      *
      *   sdFlags -> Si toma el valor NO_BLOQUEAR el metodo retorna si no hay
      *   ningun mensaje en la cola
      *
      * VALORES RETORNO:
      *    Numero de bytes leidos
      *
      * EXCEPCIONES:
      *   RangoExcepcion, PermisoExcepcion, ParametroExcepcion,
      *   NoExisteExcepcion, InterrupcionExcepcion, DesconocidoExcepcion
      *
      * NOTAS:
      *
      * </PRE>
      */
      SDWordType leer(void *pMsj, const SDWordType& sdLongMsj,
         const SDWordType& sdTipo, const SDWordType& sdFlags) const;

      /**
      * <PRE>
      *   Libera la cola IPC asociado al objeto
      *
      * PARAMETROS:
      *
      * VALORES RETORNO:
      *
      * EXCEPCIONES:
      *   PermisoExcepcion, NoExisteExcepcion, NoExisteExcepcion,
      *   DesconocidoExcepcion
      *
      * NOTAS:
      *
      * </PRE>
      */
      void destruir();

      /**
      * <PRE>
      *   Elimina todos los mensajes de la cola
      *
      * PARAMETROS:
      *
      * VALORES RETORNO:
      *
      * EXCEPCIONES:
      *    Las lanzadas por el metodo 'leer'
      *
      * NOTAS:
      *
      * </PRE>
      */
      void borrar() const;
};
#endif //COLAIPC_H
