/* Generated by Together */


#ifndef SHMIPC_H
#define SHMIPC_H

// ================================================================
// INCLUDES
// ================================================================

// INCLUDES DEL SISTEMA
#include <sys/shm.h>

// INCLUDES DEL PROJECTO
#include "IPC.h"
#include "../lang/throwable/OcupadoExcepcion.h"
#include "../lang/throwable/LlenoExcepcion.h"
#include "../lang/throwable/PermisoExcepcion.h"


// INCLUDES LOCALES

// ================================================================
// DECLARACION DE CLASE
// ================================================================

  /**
   * <PRE>
   *     SERVIABERTIS   -  Des. & Exp. Software.   (Derechos reservados)
   *     ---------------------------------------
   *
   * FICHERO: ShmIPC.H
   *
   * DESCRIPCION:
   *    Clase de utilidad para el manejo de memoria compartida IPC.
   *
   * FECHA CREACION: 22-04-2005
   *
   * AUTOR DISENYO:
   *
   * PROGRAMADOR: Jorge Martinez
   *
   * MODIFICATIONES:
   *
   *    |   FECHA    |   AUTOR   |  RAZON                                   |
   *    ---------------------------------------------------------------------
   *    | DD-MM-YYYY |       |                   |
   *    ---------------------------------------------------------------------
   *
   * </PRE>
   */


class ShmIPC : public IPC
{
   // ATRIBUTOS
   // =====================================================
   ////////////////////   PUBLIC      /////////////////////
   public:
     /**
      * Constante para el acceso a la memoria compartida en modo solo lectura
      */
      static const SDWordType SOLO_LECTURA = SHM_RDONLY;

   ////////////////////   PRIVATE      ////////////////////
   private:
     /**
      *  Tamano en bytes de la memoria compartida
      */
      SDWordType msdSize;

     /**
      * Direccion virtual de inicio de la memoria compartida
      */
      void* mpAddr;

   // METODOS
   // =====================================================
   ////////////////////   PUBLIC       ////////////////////
   public:
      // =================   CICLO DE VIDA    ================
      ShmIPC();

      // =================   OPERACIONES   ===================
      /**
      * <PRE>
      *    Crea y/o asocia el objeto a una zona de memoria compartida IPC
      *
      * PARAMETROS:
      *   sdKey -> Clave para referenciar la cola
      *
      *   sdSize -> Tamano de la memoria compartida
      *
      *   sdFlags -> Puede tomar uno de los siguientes valores: VINCULAR, CREAR
      *   o CREAR_EXCLUSIVO.
      *
      * VALORES RETORNO:
      *
      * EXCEPCIONES:
      *   PermisoExcepcion, OcupadoExcepcion, NoExisteExcepcion, RangoExcepcion,
      *   MemoriaExcepcion, LlenoExcepcion, DesconocidoExcepcion
      *
      * NOTAS:
      *
      * </PRE>
      */
      void crear(const SDWordType& sdKey, const SDWordType& sdSize,
        const SDWordType& sdFlags);

      /**
      * <PRE>
      *    Pregunta por la existencia de una zona de memoria compartida IPC
      *
      * PARAMETROS:
      *   sdKey -> Clave para referenciar la cola
      *
      *   sdSize -> Tamanyo de la memoria compartida, 1 por defecto (si no se
      *   sabe el tamanyo)
      *
      * VALORES RETORNO:
      *
      * EXCEPCIONES:
      *   PermisoExcepcion, OcupadoExcepcion, NoExisteExcepcion, RangoExcepcion,
      *   MemoriaExcepcion, LlenoExcepcion, DesconocidoExcepcion
      *
      * NOTAS:
      *     Devuelve "True" si existe la memoria y se tienen permisos
      *       suficientes para acceder. En caso contrario devuelve "False".
      * </PRE>
      */
      bool existe(const SDWordType& sdKey, const SDWordType& sdSize=1) const;



      /**
      * <PRE>
      *   Pone a 0 en toda la memoria compartida
      *
      * PARAMETROS:
      *
      * VALORES RETORNO:
      *
      * EXCEPCIONES:
      *
      * NOTAS:
      *
      * </PRE>
      */
      void borrar() const;

      /**
      * <PRE>
      *   Libera la memoria compartida IPC asociada al objeto
      *
      * PARAMETROS:
      *
      * VALORES RETORNO:
      *
      * EXCEPCIONES:
      *   PermisoExcepcion, NoExisteExcepcion, DesconocidoExcepcion
      *
      * NOTAS:
      *
      * </PRE>
      */
      void destruir();

      /**
      * <PRE>
      *   Vincula la direccion almacenada en al atributo lszAddr a la zona de
      *   memoria compartida IPC
      *
      * PARAMETROS:
      *   sdFlags -> Flags para establecder el modo de acceso. Si toma el valor
      *   SOLO_LECTURA el acceso a la memoria sera de solo lectura. En caso
      *   contrario, el acceso es de lectura y escritura (por defecto)
      *
      * VALORES RETORNO:
      *
      * EXCEPCIONES:
      *   PermisoExcepcion, RangoExcepcion, MemoriaExcepcion,
      *   DesconocidoExcepcion
      *
      * NOTAS:
      *
      * </PRE>
      */
      void vincular(const SDWordType& sdFlags = 0);


      /**
      * <PRE>
      *   Desvincula la direccion a puntada por lszAddr de la zona de memoria
      *   compartida IPC
      *
      * PARAMETROS:
      *
      * VALORES RETORNO:
      *
      * EXCEPCIONES:
      *   RangoExcepcion, DesconocidoExcepcion
      *
      * NOTAS:
      *
      * </PRE>
      */
      void desVincular() const;

      static void eliminarMemoria(UDWordType ludId);

      // =================   ACCESO       ====================
      void setSize(const SDWordType& sdSize);
      void setAddr(void* pAddr);

      // =================   CONSULTA      ===================
      SDWordType getSize() const;
      void* getAddr() const;

   ////////////////////   PROTECTED    ////////////////////
   protected:
      // =================   ACCESO       ====================
      void resetAtributos();
};

#endif //SHMIPC_H
